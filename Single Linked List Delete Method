# Define a class for the Node
class Node:
    def __init__(self, data):
        self.data = data  # data in the node
        self.next = None  # pointer to the next node

# Define a class for the LinkedList
class LinkedList:
    def __init__(self):
        self.head = None  # initially, the list is empty

    # Add a new node at the end
    def append(self, data):
        new_node = Node(data)
        if not self.head:  # If the list is empty
            self.head = new_node
            return
        last = self.head
        while last.next:  # Traverse to the last node
            last = last.next
        last.next = new_node  # Update the next of the last node to the new node

    # Delete a node by value
    def delete(self, key):
        # If the list is empty
        if not self.head:
            print("List is empty")
            return

        # If the head node itself holds the key to be deleted
        if self.head.data == key:
            self.head = self.head.next
            return

        # Search for the key to be deleted
        current = self.head
        while current.next:
            if current.next.data == key:
                current.next = current.next.next
                return
            current = current.next

        print(f"Node with data {key} not found.")

    # Print the linked list
    def print_list(self):
        temp = self.head
        while temp:  # Traverse through the list
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

# Create a LinkedList and perform operations
linked_list = LinkedList()
linked_list.append(1)
linked_list.append(2)
linked_list.append(3)
linked_list.append(4)

# Print the linked list before deletion
print("Original List:")
linked_list.print_list()

# Delete a node (e.g., node with value 3)
linked_list.delete(3)

# Print the linked list after deletion
print("List After Deletion of 3:")
linked_list.print_list()

# Attempting to delete a node that doesn't exist
linked_list.delete(5)
